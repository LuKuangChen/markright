// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Main$Markright from "../src/Main.res.mjs";

function pad(content) {
  return "  ".concat(content.replaceAll("\n", "\n  "));
}

function makeTest(testName, action, wanted) {
  return function (report) {
    var actual = action();
    if (actual === wanted) {
      return report(undefined);
    } else {
      report(testName);
      console.log("Test \"" + testName + "\" failed!");
      console.log("Wanted:");
      console.log(pad(wanted));
      console.log("Actual:");
      console.log(pad(actual));
      return ;
    }
  };
}

function runTests(tests) {
  var totalTest = {
    contents: 0
  };
  var failedTests = [];
  var report = function (failure) {
    totalTest.contents = totalTest.contents + 1 | 0;
    Core__Option.forEach(failure, (function (testName) {
            failedTests.push(testName);
          }));
  };
  tests.forEach(function (test) {
        test(report);
      });
  if (failedTests.length > 0) {
    console.log("Failed " + failedTests.length.toString() + " out of " + totalTest.contents.toString() + " tests:");
    failedTests.forEach(function (testName) {
          console.log("- " + testName);
        });
  } else {
    console.log("All " + totalTest.contents.toString() + " test(s) passed!");
  }
}

function testTranslate(testName, source, wanted) {
  return makeTest(testName, (function () {
                return Main$Markright.toHTMLString(Main$Markright.parseDocument(source), undefined);
              }), wanted);
}

runTests([
      testTranslate("Unordered list", [
              "- Foobar",
              "- Hello"
            ].join("\n"), "<ul><li>Foobar</li><li>Hello</li></ul>"),
      testTranslate("Ordered list", [
              ". Foobar",
              ". Hello"
            ].join("\n"), "<ol><li>Foobar</li><li>Hello</li></ol>"),
      testTranslate("Blockquote", [
              "> Hello",
              "  world!"
            ].join("\n"), "<blockquote>Hello world!</blockquote>"),
      testTranslate("Table", [
              "| **Name**",
              "| **Age**",
              "|-",
              "| Alice",
              "| 19",
              "|-",
              "| Bob",
              "| 18",
              "|-",
              "| Calvin",
              "| 20"
            ].join("\n"), [
              "<table>",
              "<tr><td><strong>Name</strong></td><td><strong>Age</strong></td></tr>",
              "<tr><td>Alice</td><td>19</td></tr>",
              "<tr><td>Bob</td><td>18</td></tr>",
              "<tr><td>Calvin</td><td>20</td></tr>",
              "</table>"
            ].join("")),
      testTranslate("Paragraphs seperated by blank lines", [
              "Hello",
              "",
              "World"
            ].join("\n"), "<p>Hello</p><p>World</p>"),
      testTranslate("Lists seperated by blank lines", [
              "- Foobar",
              "",
              "- Hello"
            ].join("\n"), "<ul><li>Foobar</li></ul><ul><li>Hello</li></ul>"),
      testTranslate("Nested list", [
              "- Foobar",
              "  . A",
              "  . B",
              "  . C",
              "- Barzzz"
            ].join("\n"), "<ul><li><p>Foobar</p><ol><li>A</li><li>B</li><li>C</li></ol></li><li>Barzzz</li></ul>"),
      testTranslate("TOC", [
              "= toc",
              "## Sec1",
              "foobar",
              "### Subsec 1.1",
              "## Sec 2"
            ].join("\n"), "<ol><li><p>Sec1</p><ol><li>Subsec 1.1</li></ol></li><li><p>Sec 2</p><ol></ol></li></ol><h2>Sec1</h2><p>foobar</p><h3>Subsec 1.1</h3><h2>Sec 2</h2>")
    ]);

export {
  pad ,
  makeTest ,
  runTests ,
  testTranslate ,
}
/*  Not a pure module */
